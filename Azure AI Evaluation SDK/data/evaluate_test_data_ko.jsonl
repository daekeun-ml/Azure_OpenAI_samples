{"query":"런을 어떻게 생성하나요?","context":"AML API만 사용 가능","response":"Azure Machine Learning API를 사용하여 런(Run)을 생성하려면, 먼저 Experiment를 생성해야 합니다. Experiment를 생성한 후, 해당 Experiment와 연관된 Run 객체를 생성할 수 있습니다. 아래 Python 코드는 이 과정을 보여줍니다:\n\n```\nfrom azureml.core import Experiment, Run\nfrom azureml.core.workspace import Workspace\n\n# 워크스페이스와 실험을 정의합니다\nws = Workspace.from_config()\nexp = Experiment(workspace=ws, name='my_experiment')\n\n# 새로운 런을 생성합니다\nrun = exp.start_logging()\n```\n\n위 코드에서 `from_config()` 메서드는 Azure Machine Learning 워크스페이스를 설정할 때 생성한 설정 파일을 읽어옵니다. `Experiment` 생성자는 워크스페이스와 연결된 Experiment 객체를 만들고, `start_logging()` 메서드는 새로운 Run 객체를 생성해 해당 Experiment와 연동합니다. 이제 `run` 객체를 사용하여 메트릭을 기록하고, 파일을 업로드하며, 머신 러닝 실험과 관련된 여러 정보를 추적할 수 있습니다.","ground_truth":"파리는 프랑스의 수도입니다."}
{"query":"모델을 어떻게 로그(log) 하나요?","context":"어떤 오픈소스 SDK라도 사용해 로그를 남길 수 있음","response":"Azure Machine Learning에서 모델을 로그하는 방법은 여러 가지가 있습니다.\n\n첫 번째 방법은 `Run` 객체의 `register_model()` 메서드를 사용하는 것입니다. `register_model()` 메서드는 Azure Machine Learning 서비스 워크스페이스에 모델 파일을 업로드하고, 배포를 위해 사용할 수 있도록 만들어 줍니다. 예시는 다음과 같습니다:\n\n```python\nfrom azureml.core import Model\n\nmodel_path = './outputs/my_model.pkl'\nmodel = Model.register(workspace=ws, model_path=model_path, model_name='my_model')\n```\n\n위 코드는 `model_path`에 있는 모델 파일을 Azure Machine Learning 서비스 워크스페이스에 `my_model`이라는 이름으로 등록합니다.\n\n두 번째 방법은 `Run`의 출력으로 모델을 저장하는 방식입니다. 모델 생성 코드가 Azure Machine Learning 실험으로 실행되는 스크립트 또는 Jupyter 노트북의 일부라면, 모델 파일을 `Run` 객체의 결과물로서 저장할 수 있습니다. 예시는 다음과 같습니다:\n\n```python\nfrom sklearn.linear_model import LogisticRegression\nfrom azureml.core.run import Run\n\n# 현재 런(Run) 컨텍스트 객체를 초기화합니다\nrun = Run.get_context()\n\n# 모델을 학습시킵니다\nX_train, y_train = ...\nlog_reg = LogisticRegression().fit(X_train, y_train)\n\n# 모델을 Run 객체의 outputs 디렉터리에 저장합니다\nmodel_path = 'outputs/model.pkl'\njoblib.dump(value=log_reg, filename=model_path)\n\n# 모델 파일을 런 산출물(artifact)로 로그합니다\nrun.upload_file(name=model_path, path_or_stream=model_path)\n```\n\n위 코드에서 `Run.get_context()`는 현재 실행 중인 런 컨텍스트 객체를 가져와, 런과 관련된 메타데이터와 메트릭을 추적하는 데 사용합니다. 모델을 학습한 뒤 `joblib.dump()`를 통해 모델을 파일로 저장하고, `run.upload_file()`을 사용해 해당 파일을 런의 산출물(artifact)로 업로드해 로그를 남길 수 있습니다.","ground_truth":"파리는 프랑스의 수도입니다."}
{"query":"프랑스의 수도는 무엇인가요?","context":"프랑스는 유럽에 있습니다","response":"파리는 프랑스의 수도입니다.","ground_truth":"파리는 프랑스의 수도입니다."}
